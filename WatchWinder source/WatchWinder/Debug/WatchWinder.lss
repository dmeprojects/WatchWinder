
WatchWinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000303  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000303  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010c4  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000701  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000402  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000231e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000026a  0000026a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.InitTimer0 00000014  00000224  00000224  000002b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.InitTimer1 0000002a  000001aa  000001aa  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.InitTimer2 00000018  000001f6  000001f6  0000028a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.InitInt0 00000012  0000024c  0000024c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.InitGPIO 00000014  00000238  00000238  000002cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.setup   00000016  0000020e  0000020e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_14 000000e2  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_1 00000022  000001d4  000001d4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.AdcTimer 00000002  0080010f  0080010f  00000303  2**0
                  ALLOC
 23 .bss.g_OnTimems 00000002  00800111  00800111  00000303  2**0
                  ALLOC
 24 .bss.g_OnTimeHr 00000001  00800113  00800113  00000303  2**0
                  ALLOC
 25 .bss.g_OnTimeMin 00000001  00800114  00800114  00000303  2**0
                  ALLOC
 26 .bss.g_OnTimeSec 00000001  00800115  00800115  00000303  2**0
                  ALLOC
 27 .text.main    0000000c  0000025e  0000025e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .data.gStateMachine 00000001  00800116  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_1>
   8:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
   c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  10:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  14:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  18:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  1c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  20:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  24:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  28:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  2c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  30:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  34:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_etext>
  3c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  40:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  44:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  4c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  50:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  54:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  58:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  5c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  60:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  64:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 16       	cp	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	16 01       	movw	r2, r12
  70:	17 00       	.word	0x0017	; ????
  72:	02 6e       	ori	r16, 0xE2	; 226

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000026a <__bad_interrupt>:
 26a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.InitTimer0:

00000224 <InitTimer0>:
	
	// Use timer0 to generate an interrupt every mS at 16Mhz
	switch (F_CPU)
	{
		case 16000000:
			TCCR0A	=	(1<<WGM01);								// Configure timer in CTC mode
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	84 bd       	out	0x24, r24	; 36
			TCCR0B  =	(1<<CS00) | (1<<CS01) | (0<<CS02);		// Set timer clock source to clock/64
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	95 bd       	out	0x25, r25	; 37
			OCR0A	=	250;									// Compare register A to 250
 22c:	9a ef       	ldi	r25, 0xFA	; 250
 22e:	97 bd       	out	0x27, r25	; 39
			//OCR0A	=	32;									// Compare register A to 32
			TIMSK0	=	(1<<OCIE0A);							// Enable compare match A interrupt
 230:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			sei();
 234:	78 94       	sei
 236:	08 95       	ret

Disassembly of section .text.InitTimer1:

000001aa <InitTimer1>:
void InitTimer1()	//Configuration as PWM driver for power led
{	
	switch (F_CPU)
	{
		case 16000000:
			TCCR1A = ( (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10));	//Fast PWM mode 5, clear OC1X on compare match, set at bottom
 1aa:	81 ea       	ldi	r24, 0xA1	; 161
 1ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
			TCCR1B = ((1<<CS12) | (0<<CS11) | (1<<CS10) |(1<<WGM12)); //Prescaler on 1024: 156.25Khz, mode 5
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			TIFR1 = (1<<OCF1A);		//Clear flag before set interrupt
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	86 bb       	out	0x16, r24	; 22
			TIMSK1 = (1<<OCIE1A);	//Enable compare match interrupt
 1ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
			OCR1A = 127;	//Set value in center
 1be:	8f e7       	ldi	r24, 0x7F	; 127
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = 127;	//Set value in center
 1ca:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1d2:	08 95       	ret

Disassembly of section .text.InitTimer2:

000001f6 <InitTimer2>:
}

void InitTimer2() //Configuration as PWM driver for ambient LED
{
	// Use timer2 to generate 50Hz PWM at OC2B (fast PWm, 8-bit, TOP = 0xFF (+/-61Hz))
	TCCR2A	=	(1<<WGM20) | (1<<WGM21) | (1<<COM2B1);	// Configure timer in PWM mode, non inverting
 1f6:	83 e2       	ldi	r24, 0x23	; 35
 1f8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B  =	(1<<CS20) | (1<<CS21) | (1<<CS22);		// Set timer clock source to clock/1024 (15625Khz)
 1fc:	87 e0       	ldi	r24, 0x07	; 7
 1fe:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2B	=	0;										// 0% duty cycle
 202:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	DDRD	=	DDRD | (1<<3);						// Make sure PORTD.3 is set as output for the servo
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	8a b9       	out	0x0a, r24	; 10
 20c:	08 95       	ret

Disassembly of section .text.InitInt0:

0000024c <InitInt0>:


void InitInt0()
{
	//EICRA	=	(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);	// The falling edge of INT0 generates an interrupt request
	EICRA	=	(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);	// The rising edge of INT0 generates an interrupt request
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK	=	(0<<INT1) | (1<<INT0);								// External Interrupt Request 0 Enable
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	8d bb       	out	0x1d, r24	; 29
	EIFR	=	(1<<INTF1) | (1<<INTF0);							// Clear interrupt flag to avoid false triggers
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	8c bb       	out	0x1c, r24	; 28
	sei();															// Set global interrupt enable bit
 25a:	78 94       	sei
 25c:	08 95       	ret

Disassembly of section .text.InitGPIO:

00000238 <InitGPIO>:
}

void InitGPIO(void)
{
	//Set outputs on port C
	DDRC	=	DDRC | ((1<<MotorEnable) | (1<<MotorDirection) | (1<<MotorStep) | (1<<MotorMode1) | (1<<MotorMode2) | (1<<MotorMode2) );		
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	8f 61       	ori	r24, 0x1F	; 31
 23c:	87 b9       	out	0x07, r24	; 7
	//Set input on port D
	DDRD	=	DDRD &~(1<<PowerButton);						
 23e:	8a b1       	in	r24, 0x0a	; 10
 240:	8f 7e       	andi	r24, 0xEF	; 239
 242:	8a b9       	out	0x0a, r24	; 10
	//Set outputs on port B
	DDRB	=	DDRB | (1<<AmbientLED) | (1<<PowerLED);
 244:	84 b1       	in	r24, 0x04	; 4
 246:	83 60       	ori	r24, 0x03	; 3
 248:	84 b9       	out	0x04, r24	; 4
 24a:	08 95       	ret

Disassembly of section .text.setup:

0000020e <setup>:

void setup(void)
{
	// Internal peripherals
	// --------------------
	InitTimer0();		// Init timer0 for 1mS interrupts
 20e:	0e 94 12 01 	call	0x224	; 0x224 <InitTimer0>
	InitTimer1();		// Init timer1 for PWM output 
 212:	0e 94 d5 00 	call	0x1aa	; 0x1aa <InitTimer1>
	InitTimer2();		// Init Timer2 for 61Hz PWM (should be 50Hz, but hey... :-) )
 216:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <InitTimer2>
	InitGPIO();			// Set PORTD.2 as input and PORTB.5 as output
 21a:	0e 94 1c 01 	call	0x238	; 0x238 <InitGPIO>
	InitInt0();			// Enable falling egde interrupts
 21e:	0e 94 26 01 	call	0x24c	; 0x24c <InitInt0>
 222:	08 95       	ret

Disassembly of section .text.__vector_14:

000000c8 <__vector_14>:
volatile unsigned int AdcTimer = 0;

// Interrupt triggers every 1mS
// ----------------------------
ISR (TIMER0_COMPA_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	// Delay used for debouce of switch on INT0
	// ----------------------------------------
	if (g_INT0)
  d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_INT0>
  dc:	88 23       	and	r24, r24
  de:	b9 f0       	breq	.+46     	; 0x10e <__vector_14+0x46>
	{
		// Check if the delay has passed AND button is actually pressed down
		if ( (++g_Delay > DELAY) & ((PIND & (1<<2)) == 0))
  e0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <g_Delay>
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <g_Delay>
  ea:	89 b1       	in	r24, 0x09	; 9
  ec:	86 95       	lsr	r24
  ee:	86 95       	lsr	r24
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	89 27       	eor	r24, r25
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	2b 30       	cpi	r18, 0x0B	; 11
  f8:	08 f4       	brcc	.+2      	; 0xfc <__vector_14+0x34>
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	89 23       	and	r24, r25
  fe:	39 f0       	breq	.+14     	; 0x10e <__vector_14+0x46>
		{
			g_ButtonPressed = 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_ButtonPressed>
			g_Delay = 0;
 106:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <g_Delay>
			g_INT0 = 0;
 10a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <g_INT0>
		}
	}
	
	// General purpose timer value
	// ---------------------------
	g_Timer0++;
 10e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_Timer0>
 112:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <g_Timer0+0x1>
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <g_Timer0+0x1>
 11c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_Timer0>
	
	//Timer for blinking LED's
	//------------------------
	g_BlinkTimer++;
 120:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_BlinkTimer>
 124:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <g_BlinkTimer+0x1>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <g_BlinkTimer+0x1>
 12e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_BlinkTimer>
	
	// ADC timer
	// ---------
	AdcTimer++;	
 132:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_end>
 136:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_end+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_end+0x1>
 140:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_end>
	
	// Time counter (HH:MM:SS)
	// -----------------------
	if (++g_OnTimems == 1000)
 144:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_OnTimems>
 148:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_OnTimems+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_OnTimems+0x1>
 152:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_OnTimems>
 156:	88 3e       	cpi	r24, 0xE8	; 232
 158:	93 40       	sbci	r25, 0x03	; 3
 15a:	f9 f4       	brne	.+62     	; 0x19a <__vector_14+0xd2>
	{
		g_OnTimems = 0;
 15c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <g_OnTimems+0x1>
 160:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <g_OnTimems>
		//g_DisplayDirty = 1;
		if (++g_OnTimeSec == 60)
 164:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_OnTimeSec>
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_OnTimeSec>
 16e:	8c 33       	cpi	r24, 0x3C	; 60
 170:	a1 f4       	brne	.+40     	; 0x19a <__vector_14+0xd2>
		{		
			g_OnTimeSec = 0;
 172:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_OnTimeSec>
			if (++g_OnTimeMin == 60)
 176:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_OnTimeMin>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_OnTimeMin>
 180:	8c 33       	cpi	r24, 0x3C	; 60
 182:	59 f4       	brne	.+22     	; 0x19a <__vector_14+0xd2>
			{
				g_OnTimeMin = 0;
 184:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_OnTimeMin>
				if (++g_OnTimeHr == 25)
 188:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_OnTimeHr>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_OnTimeHr>
 192:	89 31       	cpi	r24, 0x19	; 25
 194:	11 f4       	brne	.+4      	; 0x19a <__vector_14+0xd2>
				{
					g_OnTimeHr = 0;
 196:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <g_OnTimeHr>
				}
			}
		}
	}
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

Disassembly of section .text.__vector_1:

000001d4 <__vector_1>:

// Interrupt triggers on button pressed (PORTD.2, Arduino port 2)
// --------------------------------------------------------------
ISR (INT0_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
	g_INT0 = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_INT0>
	g_Delay = 0;
 1e6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <g_Delay>
}
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

Disassembly of section .text.main:

0000025e <main>:



int main(void)
{
	setup();
 25e:	0e 94 07 01 	call	0x20e	; 0x20e <setup>
	gStateMachine = STATE_IDLE;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gStateMachine>
 268:	ff cf       	rjmp	.-2      	; 0x268 <main+0xa>
