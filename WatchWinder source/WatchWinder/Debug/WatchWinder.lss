
WatchWinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000073f  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  0000073f  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000073f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001816  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f0  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ec  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000338  00000000  00000000  00003078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c7  00000000  00000000  000035c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000006a6  000006a6  0000073a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ControlPowerLED 0000004c  00000488  00000488  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ControlAmbientLED 0000004c  000004d4  000004d4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ControlMotorEnable 00000046  00000520  00000520  000005b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ToggleMotorDirection 00000022  0000064c  0000064c  000006e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.setup   00000056  00000432  00000432  000004c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.InitInt0 0000002e  0000061e  0000061e  000006b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.InitGPIO 00000046  00000566  00000566  000005fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.g_OnTimeSec 00000001  0080011b  0080011b  0000073f  2**0
                  ALLOC
 22 .bss.g_OnTimeMin 00000001  0080011c  0080011c  0000073f  2**0
                  ALLOC
 23 .bss.g_OnTimeHr 00000001  0080011d  0080011d  0000073f  2**0
                  ALLOC
 24 .bss.g_OnTimems 00000002  00800117  00800117  0000073f  2**0
                  ALLOC
 25 .bss.MotorTimer 00000002  00800119  00800119  0000073f  2**0
                  ALLOC
 26 .text.__vector_14 00000142  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_1 00000038  000005e6  000005e6  0000067a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_7 0000008a  00000344  00000344  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .data.gStateMachine 00000001  0080011e  000006aa  0000073e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .text.main    0000013a  0000020a  0000020a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.InitTimer0 0000003a  000005ac  000005ac  00000640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.InitTimer2 00000064  000003ce  000003ce  00000462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.StartTimer2 00000020  0000066e  0000066e  00000702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.StopTimer2 00000018  0000068e  0000068e  00000722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_1>
   8:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
   c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  10:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  14:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  18:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  1c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_7>
  20:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  24:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  28:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  2c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  30:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  34:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_etext>
  3c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  40:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  44:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  48:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  4c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  50:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  54:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  58:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  5c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  60:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>
  64:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 1e       	adc	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	1e 01       	movw	r2, r28
  70:	1f 00       	.word	0x001f	; ????
  72:	06 aa       	std	Z+54, r0	; 0x36

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000006a6 <__bad_interrupt>:
 6a6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ControlPowerLED:

00000488 <ControlPowerLED>:
	}
	else
	{
		PORTC &= ~(1<<MotorDirection);
	}
}
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	1f 92       	push	r1
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	89 83       	std	Y+1, r24	; 0x01
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	69 f4       	brne	.+26     	; 0x4b4 <ControlPowerLED+0x2c>
 49a:	85 e2       	ldi	r24, 0x25	; 37
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	25 e2       	ldi	r18, 0x25	; 37
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f9 01       	movw	r30, r18
 4a4:	20 81       	ld	r18, Z
 4a6:	22 60       	ori	r18, 0x02	; 2
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_PowerLEDState>
 4b2:	0b c0       	rjmp	.+22     	; 0x4ca <ControlPowerLED+0x42>
 4b4:	85 e2       	ldi	r24, 0x25	; 37
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	25 e2       	ldi	r18, 0x25	; 37
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	2d 7f       	andi	r18, 0xFD	; 253
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
 4c6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_PowerLEDState>
 4ca:	00 00       	nop
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

Disassembly of section .text.ControlAmbientLED:

000004d4 <ControlAmbientLED>:
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	1f 92       	push	r1
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	69 f4       	brne	.+26     	; 0x500 <ControlAmbientLED+0x2c>
 4e6:	85 e2       	ldi	r24, 0x25	; 37
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	25 e2       	ldi	r18, 0x25	; 37
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	21 60       	ori	r18, 0x01	; 1
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_AmbientLEDState>
 4fe:	0b c0       	rjmp	.+22     	; 0x516 <ControlAmbientLED+0x42>
 500:	85 e2       	ldi	r24, 0x25	; 37
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	25 e2       	ldi	r18, 0x25	; 37
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	20 81       	ld	r18, Z
 50c:	2e 7f       	andi	r18, 0xFE	; 254
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
 512:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <g_AmbientLEDState>
 516:	00 00       	nop
 518:	0f 90       	pop	r0
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

Disassembly of section .text.ControlMotorEnable:

00000520 <ControlMotorEnable>:
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	1f 92       	push	r1
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	49 f4       	brne	.+18     	; 0x544 <ControlMotorEnable+0x24>
 532:	88 e2       	ldi	r24, 0x28	; 40
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	28 e2       	ldi	r18, 0x28	; 40
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	f9 01       	movw	r30, r18
 53c:	20 81       	ld	r18, Z
 53e:	21 60       	ori	r18, 0x01	; 1
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	88 23       	and	r24, r24
 548:	49 f4       	brne	.+18     	; 0x55c <ControlMotorEnable+0x3c>
 54a:	88 e2       	ldi	r24, 0x28	; 40
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	28 e2       	ldi	r18, 0x28	; 40
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	f9 01       	movw	r30, r18
 554:	20 81       	ld	r18, Z
 556:	2e 7f       	andi	r18, 0xFE	; 254
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
 55c:	00 00       	nop
 55e:	0f 90       	pop	r0
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

Disassembly of section .text.ToggleMotorDirection:

0000064c <ToggleMotorDirection>:

void ToggleMotorDirection (void)
{
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
	PINC |= (1<<MotorDirection);
 654:	86 e2       	ldi	r24, 0x26	; 38
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	26 e2       	ldi	r18, 0x26	; 38
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	f9 01       	movw	r30, r18
 65e:	20 81       	ld	r18, Z
 660:	22 60       	ori	r18, 0x02	; 2
 662:	fc 01       	movw	r30, r24
 664:	20 83       	st	Z, r18
}
 666:	00 00       	nop
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

Disassembly of section .text.setup:

00000432 <setup>:
#include "global.h"
//#include "ADXL345.h"
#include "Timers.h"

void setup(void)
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
	// Internal peripherals
	// --------------------
	InitTimer0();		// Init timer0 for 1mS interrupts
 43a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <InitTimer0>
	//InitTimer1();		// Init timer1 for PWM output 
	InitTimer2();		// Init Timer2 for motor pule step
 43e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <InitTimer2>
	InitGPIO();			// Set PORTD.2 as input and PORTB.5 as output
 442:	0e 94 b3 02 	call	0x566	; 0x566 <InitGPIO>
	InitInt0();			// Enable falling egde interrupts
 446:	0e 94 0f 03 	call	0x61e	; 0x61e <InitInt0>
	
	/*Set step mode*/
	PORTC &= ~(1 << MotorMode0) | ~(1 << MotorMode1)| ~(1 << MotorMode2);	//Full step
 44a:	88 e2       	ldi	r24, 0x28	; 40
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	28 e2       	ldi	r18, 0x28	; 40
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
	//PORTC = PORTC & (1 << MotorMode0) | ~(1 << MotorMode1)| ~(1 << MotorMode2);	//1/2 step
	//PORTC = PORTC & ~(1 << MotorMode0) | (1 << MotorMode1)| ~(1 << MotorMode2);	//1/4 step
	
	PORTC |= (1 << MotorMode2);	//1/16th stepp
 45a:	88 e2       	ldi	r24, 0x28	; 40
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	28 e2       	ldi	r18, 0x28	; 40
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	f9 01       	movw	r30, r18
 464:	20 81       	ld	r18, Z
 466:	20 62       	ori	r18, 0x20	; 32
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18
	PORTC |= (1 << MotorMode2) | (1 << MotorMode0);	//1/16th stepp
 46c:	88 e2       	ldi	r24, 0x28	; 40
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	28 e2       	ldi	r18, 0x28	; 40
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	f9 01       	movw	r30, r18
 476:	20 81       	ld	r18, Z
 478:	28 62       	ori	r18, 0x28	; 40
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
	
	// External peripherals
	// --------------------
	
	/*Enable Interrupts*/
	sei();
 47e:	78 94       	sei
}
 480:	00 00       	nop
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

Disassembly of section .text.InitInt0:

0000061e <InitInt0>:




void InitInt0()
{
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
	//EICRA	=	(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);	// The falling edge of INT0 generates an interrupt request
	EICRA	=	(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);	// The rising edge of INT0 generates an interrupt request
 626:	89 e6       	ldi	r24, 0x69	; 105
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	22 e0       	ldi	r18, 0x02	; 2
 62c:	fc 01       	movw	r30, r24
 62e:	20 83       	st	Z, r18
	EIMSK	=	(0<<INT1) | (1<<INT0);								// External Interrupt Request 0 Enable
 630:	8d e3       	ldi	r24, 0x3D	; 61
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
	EIFR	=	(1<<INTF1) | (1<<INTF0);							// Clear interrupt flag to avoid false triggers
 63a:	8c e3       	ldi	r24, 0x3C	; 60
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	23 e0       	ldi	r18, 0x03	; 3
 640:	fc 01       	movw	r30, r24
 642:	20 83       	st	Z, r18
	//sei();															// Set global interrupt enable bit
}
 644:	00 00       	nop
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

Disassembly of section .text.InitGPIO:

00000566 <InitGPIO>:

void InitGPIO(void)
{
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
	//Set outputs on port C
	DDRC	=	DDRC | ((1<<MotorEnable) | (1<<MotorDirection) | (1<<MotorMode1) | (1<<MotorMode2) | (1<<MotorMode2) );		
 56e:	87 e2       	ldi	r24, 0x27	; 39
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	27 e2       	ldi	r18, 0x27	; 39
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	f9 01       	movw	r30, r18
 578:	20 81       	ld	r18, Z
 57a:	23 63       	ori	r18, 0x33	; 51
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
	//Set input on port D
	DDRD	=	DDRD &~(1<<PowerButton);						
 580:	8a e2       	ldi	r24, 0x2A	; 42
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	2a e2       	ldi	r18, 0x2A	; 42
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	f9 01       	movw	r30, r18
 58a:	20 81       	ld	r18, Z
 58c:	2f 7e       	andi	r18, 0xEF	; 239
 58e:	fc 01       	movw	r30, r24
 590:	20 83       	st	Z, r18
	//Set outputs on port B
	DDRB	=	DDRB | (1<<AmbientLED) | (1<<PowerLED);
 592:	84 e2       	ldi	r24, 0x24	; 36
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	24 e2       	ldi	r18, 0x24	; 36
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	f9 01       	movw	r30, r18
 59c:	20 81       	ld	r18, Z
 59e:	23 60       	ori	r18, 0x03	; 3
 5a0:	fc 01       	movw	r30, r24
 5a2:	20 83       	st	Z, r18
 5a4:	00 00       	nop
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

Disassembly of section .text.__vector_14:

000000c8 <__vector_14>:


// Interrupt triggers every 1mS
// ----------------------------
ISR (TIMER0_COMPA_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	// Delay used for debouce of switch on INT0
	// ----------------------------------------
	if (g_INT0)
  e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_INT0>
  ec:	88 23       	and	r24, r24
  ee:	31 f1       	breq	.+76     	; 0x13c <__vector_14+0x74>
	{
		// Check if the delay has passed AND button is actually pressed down
		if ( (++g_Delay > DELAY) & ((PIND & (1<<2)) == 0))
  f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_Delay>
  f4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_Delay+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_Delay+0x1>
  fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_Delay>
 102:	31 e0       	ldi	r19, 0x01	; 1
 104:	0b 97       	sbiw	r24, 0x0b	; 11
 106:	08 f4       	brcc	.+2      	; 0x10a <__vector_14+0x42>
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	89 e2       	ldi	r24, 0x29	; 41
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	80 81       	ld	r24, Z
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	84 70       	andi	r24, 0x04	; 4
 118:	99 27       	eor	r25, r25
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	89 2b       	or	r24, r25
 11e:	09 f0       	breq	.+2      	; 0x122 <__vector_14+0x5a>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	83 2f       	mov	r24, r19
 124:	82 23       	and	r24, r18
 126:	88 23       	and	r24, r24
 128:	49 f0       	breq	.+18     	; 0x13c <__vector_14+0x74>
		{
			g_ButtonPressed = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_ButtonPressed>
			g_Delay = 0;
 130:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_Delay+0x1>
 134:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_Delay>
			g_INT0 = 0;
 138:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <g_INT0>
		}
	}
	
	// General purpose timer value
	// ---------------------------
	g_Timer0++;
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <g_Timer0>
 140:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <g_Timer0+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <g_Timer0+0x1>
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <g_Timer0>
	
	g_MotorPulseTimer++;
 14e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_MotorPulseTimer>
 152:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_MotorPulseTimer+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <g_MotorPulseTimer+0x1>
 15c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_MotorPulseTimer>
	g_MotorTimer++;
 160:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_MotorTimer>
 164:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_MotorTimer+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <g_MotorTimer+0x1>
 16e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_MotorTimer>
	
	
	//Timer for blinking LED's
	//------------------------
	g_BlinkTimer++;
 172:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_BlinkTimer>
 176:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_BlinkTimer+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_BlinkTimer+0x1>
 180:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_BlinkTimer>
	
	// ADC timer
	// ---------
	MotorTimer++;	
 184:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <MotorTimer>
 188:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <MotorTimer+0x1>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <MotorTimer+0x1>
 192:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <MotorTimer>
	
	// Time counter (HH:MM:SS)
	// -----------------------
	if (++g_OnTimems == 1000)
 196:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_end>
 19a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <_end+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_end+0x1>
 1a4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_end>
 1a8:	88 3e       	cpi	r24, 0xE8	; 232
 1aa:	93 40       	sbci	r25, 0x03	; 3
 1ac:	f9 f4       	brne	.+62     	; 0x1ec <__vector_14+0x124>
	{
		g_OnTimems = 0;
 1ae:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_end+0x1>
 1b2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_end>
		//g_DisplayDirty = 1;
		if (++g_OnTimeSec == 60)
 1b6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_OnTimeSec>
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_OnTimeSec>
 1c0:	8c 33       	cpi	r24, 0x3C	; 60
 1c2:	a1 f4       	brne	.+40     	; 0x1ec <__vector_14+0x124>
		{		
			g_OnTimeSec = 0;
 1c4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <g_OnTimeSec>
			if (++g_OnTimeMin == 60)
 1c8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_OnTimeMin>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_OnTimeMin>
 1d2:	8c 33       	cpi	r24, 0x3C	; 60
 1d4:	59 f4       	brne	.+22     	; 0x1ec <__vector_14+0x124>
			{
				g_OnTimeMin = 0;
 1d6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <g_OnTimeMin>
				if (++g_OnTimeHr == 25)
 1da:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_OnTimeHr>
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_OnTimeHr>
 1e4:	89 31       	cpi	r24, 0x19	; 25
 1e6:	11 f4       	brne	.+4      	; 0x1ec <__vector_14+0x124>
				{
					g_OnTimeHr = 0;
 1e8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <g_OnTimeHr>
				}
			}
		}
	}
}
 1ec:	00 00       	nop
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

Disassembly of section .text.__vector_1:

000005e6 <__vector_1>:

// Interrupt triggers on button pressed (PORTD.2, Arduino port 2)
// --------------------------------------------------------------
ISR (INT0_vect)
{
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	8f 93       	push	r24
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
	g_INT0 = 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_INT0>
	g_Delay = 0;
 602:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_Delay+0x1>
 606:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_Delay>
}
 60a:	00 00       	nop
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	8f 91       	pop	r24
 612:	0f 90       	pop	r0
 614:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

Disassembly of section .text.__vector_7:

00000344 <__vector_7>:

/*
Interrupt triggers 
*/
ISR (TIMER2_COMPA_vect)
{	
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	2f 93       	push	r18
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
	//Check OCR2A value
	//Switch between high and low value depending on OCR2A content
	//Increment or decrement motor steps
	if (OCR2A == HIGHTIME)
 362:	83 eb       	ldi	r24, 0xB3	; 179
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	8d 37       	cpi	r24, 0x7D	; 125
 36c:	31 f4       	brne	.+12     	; 0x37a <__vector_7+0x36>
	{
		OCR2A = LOWTIME;
 36e:	83 eb       	ldi	r24, 0xB3	; 179
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	2d e7       	ldi	r18, 0x7D	; 125
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
 378:	05 c0       	rjmp	.+10     	; 0x384 <__vector_7+0x40>
	}
	else
	{
		OCR2A = HIGHTIME;
 37a:	83 eb       	ldi	r24, 0xB3	; 179
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	2d e7       	ldi	r18, 0x7D	; 125
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18
	}
	
	if (g_MotorDirection == FORWARD)
 384:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_MotorDirection>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	51 f4       	brne	.+20     	; 0x3a0 <__vector_7+0x5c>
	{	
		g_MotorSteps++;
 38c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_MotorSteps>
 390:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_MotorSteps+0x1>
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <g_MotorSteps+0x1>
 39a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_MotorSteps>
	}
	else
	{		
		g_MotorSteps--;
	}	
}
 39e:	09 c0       	rjmp	.+18     	; 0x3b2 <__vector_7+0x6e>
	{	
		g_MotorSteps++;
	}
	else
	{		
		g_MotorSteps--;
 3a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_MotorSteps>
 3a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_MotorSteps+0x1>
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <g_MotorSteps+0x1>
 3ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_MotorSteps>
	}	
}
 3b2:	00 00       	nop
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

Disassembly of section .text.main:

0000020a <main>:
unsigned char g_PowerLEDState;
unsigned char g_AmbientLEDState;


int main(void)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	g_ButtonPressed = 0;
 212:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_ButtonPressed>
	g_Timer0 = 0;
 216:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <g_Timer0+0x1>
 21a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <g_Timer0>
	g_LedState = 0;
 21e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <g_LedState>
	
	gStateMachine = STATE_IDLE;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
	
	setup();
 228:	0e 94 19 02 	call	0x432	; 0x432 <setup>
		
    while(1)
    {
        switch (gStateMachine)
 22c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <gStateMachine>
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	91 05       	cpc	r25, r1
 238:	09 f4       	brne	.+2      	; 0x23c <main+0x32>
 23a:	43 c0       	rjmp	.+134    	; 0x2c2 <main+0xb8>
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	91 05       	cpc	r25, r1
 240:	34 f4       	brge	.+12     	; 0x24e <main+0x44>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	91 05       	cpc	r25, r1
 246:	59 f0       	breq	.+22     	; 0x25e <main+0x54>
 248:	02 97       	sbiw	r24, 0x02	; 2
 24a:	c1 f0       	breq	.+48     	; 0x27c <main+0x72>
			break;
			
			default:
			/*Should never enter this state*/
			/*Add fault handling*/
			break;			
 24c:	7a c0       	rjmp	.+244    	; 0x342 <main+0x138>
	
	setup();
		
    while(1)
    {
        switch (gStateMachine)
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	91 05       	cpc	r25, r1
 252:	09 f4       	brne	.+2      	; 0x256 <main+0x4c>
 254:	6f c0       	rjmp	.+222    	; 0x334 <main+0x12a>
 256:	05 97       	sbiw	r24, 0x05	; 5
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x52>
 25a:	6e c0       	rjmp	.+220    	; 0x338 <main+0x12e>
			break;
			
			default:
			/*Should never enter this state*/
			/*Add fault handling*/
			break;			
 25c:	72 c0       	rjmp	.+228    	; 0x342 <main+0x138>
    while(1)
    {
        switch (gStateMachine)
		{
			case STATE_BOOT:
			ControlPowerLED(OFF);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 44 02 	call	0x488	; 0x488 <ControlPowerLED>
			ControlMotorEnable(OFF);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 90 02 	call	0x520	; 0x520 <ControlMotorEnable>
			ControlAmbientLED(OFF);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <ControlAmbientLED>
			gStateMachine++;			
 270:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <gStateMachine>
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
			
			break;
 27a:	63 c0       	rjmp	.+198    	; 0x342 <main+0x138>
			motor disabled
			ambient light off
			power led breathing			
			*/
			
			if (g_ButtonPressed)
 27c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_ButtonPressed>
 280:	88 23       	and	r24, r24
 282:	09 f4       	brne	.+2      	; 0x286 <main+0x7c>
 284:	5b c0       	rjmp	.+182    	; 0x33c <main+0x132>
			{
				g_ButtonPressed = 0;
 286:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_ButtonPressed>
				ControlPowerLED(ON);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 44 02 	call	0x488	; 0x488 <ControlPowerLED>
				ControlMotorEnable(ON);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 90 02 	call	0x520	; 0x520 <ControlMotorEnable>
				g_MotorSteps = 0;
 296:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <g_MotorSteps+0x1>
 29a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <g_MotorSteps>
				g_MotorPosition = 500;
 29e:	84 ef       	ldi	r24, 0xF4	; 244
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_MotorPosition+0x1>
 2a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_MotorPosition>
				g_MotorDirection = FORWARD;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_MotorDirection>
				gStateMachine++;
 2b0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <gStateMachine>
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
				StartTimer2(0);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 37 03 	call	0x66e	; 0x66e <StartTimer2>
			}

			break;
 2c0:	3d c0       	rjmp	.+122    	; 0x33c <main+0x132>
			
			case STATE_ROTATE:
			//PINC = (1<< MotorStep);	
				/*Increment motor pulses*/
				if (g_MotorSteps == g_MotorPosition)	//Change direction
 2c2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <g_MotorSteps>
 2c6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <g_MotorSteps+0x1>
 2ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_MotorPosition>
 2ce:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_MotorPosition+0x1>
 2d2:	28 17       	cp	r18, r24
 2d4:	39 07       	cpc	r19, r25
 2d6:	e1 f4       	brne	.+56     	; 0x310 <main+0x106>
				{
					if (g_MotorSteps < 0)
 2d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_MotorSteps>
 2dc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_MotorSteps+0x1>
 2e0:	99 23       	and	r25, r25
 2e2:	64 f4       	brge	.+24     	; 0x2fc <main+0xf2>
					{
						g_MotorDirection = FORWARD;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_MotorDirection>
						ToggleMotorDirection();
 2ea:	0e 94 26 03 	call	0x64c	; 0x64c <ToggleMotorDirection>
						g_MotorPosition = 500;
 2ee:	84 ef       	ldi	r24, 0xF4	; 244
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_MotorPosition+0x1>
 2f6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_MotorPosition>
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <main+0x106>
					}
					else
					{
						g_MotorDirection = BACKWARD;
 2fc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <g_MotorDirection>
						ToggleMotorDirection();
 300:	0e 94 26 03 	call	0x64c	; 0x64c <ToggleMotorDirection>
						g_MotorPosition = -500;
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	9e ef       	ldi	r25, 0xFE	; 254
 308:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_MotorPosition+0x1>
 30c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_MotorPosition>
					}				

				}
				
				if (g_ButtonPressed)
 310:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_ButtonPressed>
 314:	88 23       	and	r24, r24
 316:	a1 f0       	breq	.+40     	; 0x340 <main+0x136>
				{
					g_ButtonPressed = 0;
 318:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_ButtonPressed>
					ControlPowerLED(OFF);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 44 02 	call	0x488	; 0x488 <ControlPowerLED>
					ControlMotorEnable(OFF);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 90 02 	call	0x520	; 0x520 <ControlMotorEnable>
					gStateMachine = STATE_IDLE;
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
					StopTimer2();
 32e:	0e 94 47 03 	call	0x68e	; 0x68e <StopTimer2>
				}
				//PINC = (1<< MotorStep);	
				
			break;
 332:	06 c0       	rjmp	.+12     	; 0x340 <main+0x136>
			
			case STATE_DIMMING:
			
			break;
 334:	00 00       	nop
 336:	7a cf       	rjmp	.-268    	; 0x22c <main+0x22>

			case STATE_SPEEDADJUST:
			
			break;
 338:	00 00       	nop
 33a:	78 cf       	rjmp	.-272    	; 0x22c <main+0x22>
				g_MotorDirection = FORWARD;
				gStateMachine++;
				StartTimer2(0);
			}

			break;
 33c:	00 00       	nop
 33e:	76 cf       	rjmp	.-276    	; 0x22c <main+0x22>
					gStateMachine = STATE_IDLE;
					StopTimer2();
				}
				//PINC = (1<< MotorStep);	
				
			break;
 340:	00 00       	nop
			default:
			/*Should never enter this state*/
			/*Add fault handling*/
			break;			
		}
	}
 342:	74 cf       	rjmp	.-280    	; 0x22c <main+0x22>

Disassembly of section .text.InitTimer0:

000005ac <InitTimer0>:
#include <avr/interrupt.h>
#include "global.h"


void InitTimer0()
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
			TIMSK0	=	(1<<OCIE0A);							// Enable compare match A interrupt
			//sei();
		break;
		
		case 8000000:
			TCCR0A	=	(1<<WGM01);								// Configure timer in CTC mode
 5b4:	84 e4       	ldi	r24, 0x44	; 68
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	22 e0       	ldi	r18, 0x02	; 2
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
			TCCR0B  =	(1<<CS00) | (1<<CS01) | (0<<CS02);		// Set timer clock source to clock/8
 5be:	85 e4       	ldi	r24, 0x45	; 69
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	23 e0       	ldi	r18, 0x03	; 3
 5c4:	fc 01       	movw	r30, r24
 5c6:	20 83       	st	Z, r18
			OCR0A	=	125;									// Compare register A to 125
 5c8:	87 e4       	ldi	r24, 0x47	; 71
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	2d e7       	ldi	r18, 0x7D	; 125
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
			TIMSK0	=	(1<<OCIE0A);							// Enable compare match A interrupt
 5d2:	8e e6       	ldi	r24, 0x6E	; 110
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	22 e0       	ldi	r18, 0x02	; 2
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
			//sei();
		break;
 5dc:	00 00       	nop
	}
}
 5de:	00 00       	nop
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

Disassembly of section .text.InitTimer2:

000003ce <InitTimer2>:
	}

}

void InitTimer2() //Configuration as step driver for stepper motor
{	
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
	/*
	TCCR2A in CTC mode, toggle O2CA on compare match
	*/
	TCCR2A	=	(0<<COM2A1) | (1<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM20) | (1<<WGM21);	
 3d6:	80 eb       	ldi	r24, 0xB0	; 176
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	22 e4       	ldi	r18, 0x42	; 66
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
	TCCR2B  =	(0<<WGM22) | (0<<CS20) | (0<<CS21) | (1<<CS22);		// Set timer clock source to clock/64 (8Mhz/64 = 125Khz)
 3e0:	81 eb       	ldi	r24, 0xB1	; 177
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	24 e0       	ldi	r18, 0x04	; 4
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
	OCR2A	=	125;	//1ms interrupt
 3ea:	83 eb       	ldi	r24, 0xB3	; 179
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	2d e7       	ldi	r18, 0x7D	; 125
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
	OCR2B	=	0;		
 3f4:	84 eb       	ldi	r24, 0xB4	; 180
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	fc 01       	movw	r30, r24
 3fa:	10 82       	st	Z, r1
	TCNT2	=	0;		
 3fc:	82 eb       	ldi	r24, 0xB2	; 178
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	fc 01       	movw	r30, r24
 402:	10 82       	st	Z, r1
	DDRB	=	DDRB | (1<<MotorStep);						// Make sure PORTB.3 is set as output for the servo
 404:	84 e2       	ldi	r24, 0x24	; 36
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	24 e2       	ldi	r18, 0x24	; 36
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	28 60       	ori	r18, 0x08	; 8
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
	TIFR2	=	(1<<OCF2A);		//Clear interrupt flag
 416:	87 e3       	ldi	r24, 0x37	; 55
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	22 e0       	ldi	r18, 0x02	; 2
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
	TIMSK2	=	(1<<OCIE2A);	//Enable interrupt
 420:	80 e7       	ldi	r24, 0x70	; 112
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	22 e0       	ldi	r18, 0x02	; 2
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
}
 42a:	00 00       	nop
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

Disassembly of section .text.StartTimer2:

0000066e <StartTimer2>:

void StartTimer2 (unsigned char Prescaler)
{
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	1f 92       	push	r1
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	89 83       	std	Y+1, r24	; 0x01
	TCCR2B  =	(0<<CS20) | (1<<CS21) | (1<<CS22);		// Set timer clock source to clock/64 (8Mhz/64 = 125Khz)	
 67a:	81 eb       	ldi	r24, 0xB1	; 177
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	26 e0       	ldi	r18, 0x06	; 6
 680:	fc 01       	movw	r30, r24
 682:	20 83       	st	Z, r18
}
 684:	00 00       	nop
 686:	0f 90       	pop	r0
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	08 95       	ret

Disassembly of section .text.StopTimer2:

0000068e <StopTimer2>:
 
 void StopTimer2(void)
 {
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
	 TCCR2B = 0;	 
 696:	81 eb       	ldi	r24, 0xB1	; 177
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	fc 01       	movw	r30, r24
 69c:	10 82       	st	Z, r1
 }
 69e:	00 00       	nop
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret
