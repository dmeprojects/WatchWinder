
WatchWinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000717  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  00000717  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000717  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017e5  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fd  00000000  00000000  00002043  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000816  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000032c  00000000  00000000  00003058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a0  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000067e  0000067e  00000712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ControlPowerLED 0000004c  00000458  00000458  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ControlAmbientLED 0000004c  000004a4  000004a4  00000538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ControlMotorEnable 00000046  000004f0  000004f0  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ToggleMotorDirection 00000022  0000065c  0000065c  000006f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.setup   00000056  00000402  00000402  00000496  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.InitInt0 0000002e  0000062e  0000062e  000006c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.InitGPIO 00000046  00000536  00000536  000005ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.g_OnTimeSec 00000001  0080011b  0080011b  00000717  2**0
                  ALLOC
 22 .bss.g_OnTimeMin 00000001  0080011c  0080011c  00000717  2**0
                  ALLOC
 23 .bss.g_OnTimeHr 00000001  0080011d  0080011d  00000717  2**0
                  ALLOC
 24 .bss.g_OnTimems 00000002  00800117  00800117  00000717  2**0
                  ALLOC
 25 .bss.MotorTimer 00000002  00800119  00800119  00000717  2**0
                  ALLOC
 26 .text.__vector_14 00000142  0000025c  0000025c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_1 00000038  000005f6  000005f6  0000068a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_7 00000040  0000057c  0000057c  00000610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .data.gStateMachine 00000001  0080011e  00000682  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .text.main    00000194  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.InitTimer0 0000003a  000005bc  000005bc  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.InitTimer2 00000064  0000039e  0000039e  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_1>
   8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
   c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  10:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  14:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  18:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  1c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_7>
  20:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  24:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  28:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  2c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  30:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_14>
  3c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  40:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  44:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  48:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  4c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  50:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  54:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  58:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  5c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  60:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
  64:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 1e       	adc	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	1e 01       	movw	r2, r28
  70:	1f 00       	.word	0x001f	; ????
  72:	06 82       	std	Z+6, r0	; 0x06

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000067e <__bad_interrupt>:
 67e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.ControlPowerLED:

00000458 <ControlPowerLED>:
	}
	else
	{
		PORTC &= ~(1<<MotorDirection);
	}
}
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	1f 92       	push	r1
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	89 83       	std	Y+1, r24	; 0x01
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	69 f4       	brne	.+26     	; 0x484 <ControlPowerLED+0x2c>
 46a:	85 e2       	ldi	r24, 0x25	; 37
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	25 e2       	ldi	r18, 0x25	; 37
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	f9 01       	movw	r30, r18
 474:	20 81       	ld	r18, Z
 476:	22 60       	ori	r18, 0x02	; 2
 478:	fc 01       	movw	r30, r24
 47a:	20 83       	st	Z, r18
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_PowerLEDState>
 482:	0b c0       	rjmp	.+22     	; 0x49a <ControlPowerLED+0x42>
 484:	85 e2       	ldi	r24, 0x25	; 37
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	25 e2       	ldi	r18, 0x25	; 37
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	f9 01       	movw	r30, r18
 48e:	20 81       	ld	r18, Z
 490:	2d 7f       	andi	r18, 0xFD	; 253
 492:	fc 01       	movw	r30, r24
 494:	20 83       	st	Z, r18
 496:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_PowerLEDState>
 49a:	00 00       	nop
 49c:	0f 90       	pop	r0
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

Disassembly of section .text.ControlAmbientLED:

000004a4 <ControlAmbientLED>:
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	1f 92       	push	r1
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	69 f4       	brne	.+26     	; 0x4d0 <ControlAmbientLED+0x2c>
 4b6:	85 e2       	ldi	r24, 0x25	; 37
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	25 e2       	ldi	r18, 0x25	; 37
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	f9 01       	movw	r30, r18
 4c0:	20 81       	ld	r18, Z
 4c2:	21 60       	ori	r18, 0x01	; 1
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_AmbientLEDState>
 4ce:	0b c0       	rjmp	.+22     	; 0x4e6 <ControlAmbientLED+0x42>
 4d0:	85 e2       	ldi	r24, 0x25	; 37
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	25 e2       	ldi	r18, 0x25	; 37
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	f9 01       	movw	r30, r18
 4da:	20 81       	ld	r18, Z
 4dc:	2e 7f       	andi	r18, 0xFE	; 254
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18
 4e2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <g_AmbientLEDState>
 4e6:	00 00       	nop
 4e8:	0f 90       	pop	r0
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

Disassembly of section .text.ControlMotorEnable:

000004f0 <ControlMotorEnable>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	1f 92       	push	r1
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
 4fa:	89 83       	std	Y+1, r24	; 0x01
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	49 f4       	brne	.+18     	; 0x514 <ControlMotorEnable+0x24>
 502:	88 e2       	ldi	r24, 0x28	; 40
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	28 e2       	ldi	r18, 0x28	; 40
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	21 60       	ori	r18, 0x01	; 1
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	88 23       	and	r24, r24
 518:	49 f4       	brne	.+18     	; 0x52c <ControlMotorEnable+0x3c>
 51a:	88 e2       	ldi	r24, 0x28	; 40
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	28 e2       	ldi	r18, 0x28	; 40
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	2e 7f       	andi	r18, 0xFE	; 254
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
 52c:	00 00       	nop
 52e:	0f 90       	pop	r0
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

Disassembly of section .text.ToggleMotorDirection:

0000065c <ToggleMotorDirection>:

void ToggleMotorDirection (void)
{
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
	PINC |= (1<<MotorDirection);
 664:	86 e2       	ldi	r24, 0x26	; 38
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	26 e2       	ldi	r18, 0x26	; 38
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	f9 01       	movw	r30, r18
 66e:	20 81       	ld	r18, Z
 670:	22 60       	ori	r18, 0x02	; 2
 672:	fc 01       	movw	r30, r24
 674:	20 83       	st	Z, r18
}
 676:	00 00       	nop
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

Disassembly of section .text.setup:

00000402 <setup>:
#include "global.h"
//#include "ADXL345.h"
#include "Timers.h"

void setup(void)
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
	// Internal peripherals
	// --------------------
	InitTimer0();		// Init timer0 for 1mS interrupts
 40a:	0e 94 de 02 	call	0x5bc	; 0x5bc <InitTimer0>
	//InitTimer1();		// Init timer1 for PWM output 
	InitTimer2();		// Init Timer2 for motor pule step
 40e:	0e 94 cf 01 	call	0x39e	; 0x39e <InitTimer2>
	InitGPIO();			// Set PORTD.2 as input and PORTB.5 as output
 412:	0e 94 9b 02 	call	0x536	; 0x536 <InitGPIO>
	InitInt0();			// Enable falling egde interrupts
 416:	0e 94 17 03 	call	0x62e	; 0x62e <InitInt0>
	
	/*Set step mode*/
	PORTC &= ~(1 << MotorMode0) | ~(1 << MotorMode1)| ~(1 << MotorMode2);	//Full step
 41a:	88 e2       	ldi	r24, 0x28	; 40
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	28 e2       	ldi	r18, 0x28	; 40
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	f9 01       	movw	r30, r18
 424:	20 81       	ld	r18, Z
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
	//PORTC = PORTC & (1 << MotorMode0) | ~(1 << MotorMode1)| ~(1 << MotorMode2);	//1/2 step
	//PORTC = PORTC & ~(1 << MotorMode0) | (1 << MotorMode1)| ~(1 << MotorMode2);	//1/4 step
	
	PORTC |= (1 << MotorMode2);	//1/16th stepp
 42a:	88 e2       	ldi	r24, 0x28	; 40
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	28 e2       	ldi	r18, 0x28	; 40
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	f9 01       	movw	r30, r18
 434:	20 81       	ld	r18, Z
 436:	20 62       	ori	r18, 0x20	; 32
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
	PORTC |= (1 << MotorMode2) | (1 << MotorMode0);	//1/16th stepp
 43c:	88 e2       	ldi	r24, 0x28	; 40
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	28 e2       	ldi	r18, 0x28	; 40
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	f9 01       	movw	r30, r18
 446:	20 81       	ld	r18, Z
 448:	28 62       	ori	r18, 0x28	; 40
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
	
	// External peripherals
	// --------------------
	
	/*Enable Interrupts*/
	sei();
 44e:	78 94       	sei
}
 450:	00 00       	nop
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

Disassembly of section .text.InitInt0:

0000062e <InitInt0>:




void InitInt0()
{
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
	//EICRA	=	(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);	// The falling edge of INT0 generates an interrupt request
	EICRA	=	(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);	// The rising edge of INT0 generates an interrupt request
 636:	89 e6       	ldi	r24, 0x69	; 105
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	22 e0       	ldi	r18, 0x02	; 2
 63c:	fc 01       	movw	r30, r24
 63e:	20 83       	st	Z, r18
	EIMSK	=	(0<<INT1) | (1<<INT0);								// External Interrupt Request 0 Enable
 640:	8d e3       	ldi	r24, 0x3D	; 61
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	21 e0       	ldi	r18, 0x01	; 1
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
	EIFR	=	(1<<INTF1) | (1<<INTF0);							// Clear interrupt flag to avoid false triggers
 64a:	8c e3       	ldi	r24, 0x3C	; 60
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	23 e0       	ldi	r18, 0x03	; 3
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18
	//sei();															// Set global interrupt enable bit
}
 654:	00 00       	nop
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

Disassembly of section .text.InitGPIO:

00000536 <InitGPIO>:

void InitGPIO(void)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
	//Set outputs on port C
	DDRC	=	DDRC | ((1<<MotorEnable) | (1<<MotorDirection) | (1<<MotorStep) | (1<<MotorMode1) | (1<<MotorMode2) | (1<<MotorMode2) );		
 53e:	87 e2       	ldi	r24, 0x27	; 39
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	27 e2       	ldi	r18, 0x27	; 39
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	f9 01       	movw	r30, r18
 548:	20 81       	ld	r18, Z
 54a:	2b 63       	ori	r18, 0x3B	; 59
 54c:	fc 01       	movw	r30, r24
 54e:	20 83       	st	Z, r18
	//Set input on port D
	DDRD	=	DDRD &~(1<<PowerButton);						
 550:	8a e2       	ldi	r24, 0x2A	; 42
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	2a e2       	ldi	r18, 0x2A	; 42
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	f9 01       	movw	r30, r18
 55a:	20 81       	ld	r18, Z
 55c:	2f 7e       	andi	r18, 0xEF	; 239
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
	//Set outputs on port B
	DDRB	=	DDRB | (1<<AmbientLED) | (1<<PowerLED);
 562:	84 e2       	ldi	r24, 0x24	; 36
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	24 e2       	ldi	r18, 0x24	; 36
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	20 81       	ld	r18, Z
 56e:	23 60       	ori	r18, 0x03	; 3
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
 574:	00 00       	nop
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

Disassembly of section .text.__vector_14:

0000025c <__vector_14>:
volatile unsigned int MotorTimer = 0;

// Interrupt triggers every 1mS
// ----------------------------
ISR (TIMER0_COMPA_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	// Delay used for debouce of switch on INT0
	// ----------------------------------------
	if (g_INT0)
 27c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_INT0>
 280:	88 23       	and	r24, r24
 282:	31 f1       	breq	.+76     	; 0x2d0 <__vector_14+0x74>
	{
		// Check if the delay has passed AND button is actually pressed down
		if ( (++g_Delay > DELAY) & ((PIND & (1<<2)) == 0))
 284:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_Delay>
 288:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_Delay+0x1>
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_Delay+0x1>
 292:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_Delay>
 296:	31 e0       	ldi	r19, 0x01	; 1
 298:	0b 97       	sbiw	r24, 0x0b	; 11
 29a:	08 f4       	brcc	.+2      	; 0x29e <__vector_14+0x42>
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	89 e2       	ldi	r24, 0x29	; 41
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	84 70       	andi	r24, 0x04	; 4
 2ac:	99 27       	eor	r25, r25
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	89 2b       	or	r24, r25
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <__vector_14+0x5a>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	83 2f       	mov	r24, r19
 2b8:	82 23       	and	r24, r18
 2ba:	88 23       	and	r24, r24
 2bc:	49 f0       	breq	.+18     	; 0x2d0 <__vector_14+0x74>
		{
			g_ButtonPressed = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_ButtonPressed>
			g_Delay = 0;
 2c4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_Delay+0x1>
 2c8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <g_Delay>
			g_INT0 = 0;
 2cc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <g_INT0>
		}
	}
	
	// General purpose timer value
	// ---------------------------
	g_Timer0++;
 2d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_Timer0>
 2d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_Timer0+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <g_Timer0+0x1>
 2de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_Timer0>
	
	g_MotorPulseTimer++;
 2e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_MotorPulseTimer>
 2e6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_MotorPulseTimer+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <g_MotorPulseTimer+0x1>
 2f0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_MotorPulseTimer>
	g_MotorTimer++;
 2f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_MotorTimer>
 2f8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_MotorTimer+0x1>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <g_MotorTimer+0x1>
 302:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_MotorTimer>
	
	
	//Timer for blinking LED's
	//------------------------
	g_BlinkTimer++;
 306:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_BlinkTimer>
 30a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_BlinkTimer+0x1>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_BlinkTimer+0x1>
 314:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_BlinkTimer>
	
	// ADC timer
	// ---------
	MotorTimer++;	
 318:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <MotorTimer>
 31c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <MotorTimer+0x1>
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <MotorTimer+0x1>
 326:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <MotorTimer>
	
	// Time counter (HH:MM:SS)
	// -----------------------
	if (++g_OnTimems == 1000)
 32a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_end>
 32e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <_end+0x1>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_end+0x1>
 338:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_end>
 33c:	88 3e       	cpi	r24, 0xE8	; 232
 33e:	93 40       	sbci	r25, 0x03	; 3
 340:	f9 f4       	brne	.+62     	; 0x380 <__vector_14+0x124>
	{
		g_OnTimems = 0;
 342:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_end+0x1>
 346:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_end>
		//g_DisplayDirty = 1;
		if (++g_OnTimeSec == 60)
 34a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_OnTimeSec>
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_OnTimeSec>
 354:	8c 33       	cpi	r24, 0x3C	; 60
 356:	a1 f4       	brne	.+40     	; 0x380 <__vector_14+0x124>
		{		
			g_OnTimeSec = 0;
 358:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <g_OnTimeSec>
			if (++g_OnTimeMin == 60)
 35c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_OnTimeMin>
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_OnTimeMin>
 366:	8c 33       	cpi	r24, 0x3C	; 60
 368:	59 f4       	brne	.+22     	; 0x380 <__vector_14+0x124>
			{
				g_OnTimeMin = 0;
 36a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <g_OnTimeMin>
				if (++g_OnTimeHr == 25)
 36e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_OnTimeHr>
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_OnTimeHr>
 378:	89 31       	cpi	r24, 0x19	; 25
 37a:	11 f4       	brne	.+4      	; 0x380 <__vector_14+0x124>
				{
					g_OnTimeHr = 0;
 37c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <g_OnTimeHr>
				}
			}
		}
	}
}
 380:	00 00       	nop
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

Disassembly of section .text.__vector_1:

000005f6 <__vector_1>:

// Interrupt triggers on button pressed (PORTD.2, Arduino port 2)
// --------------------------------------------------------------
ISR (INT0_vect)
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	8f 93       	push	r24
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
	g_INT0 = 1;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_INT0>
	g_Delay = 0;
 612:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_Delay+0x1>
 616:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <g_Delay>
}
 61a:	00 00       	nop
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	8f 91       	pop	r24
 622:	0f 90       	pop	r0
 624:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

Disassembly of section .text.__vector_7:

0000057c <__vector_7>:

/*
Interrupt triggers 
*/
ISR (TIMER2_COMPA_vect)
{	
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
	//Change OCR2A value
	g_MotorTimer++;	
 594:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_MotorTimer>
 598:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_MotorTimer+0x1>
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <g_MotorTimer+0x1>
 5a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_MotorTimer>
}
 5a6:	00 00       	nop
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	0f 90       	pop	r0
 5b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

Disassembly of section .text.main:

000000c8 <main>:
volatile unsigned char g_RFState;
int g_MotorPulses;
int g_MotorPosition;

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	g_ButtonPressed = 0;
  d0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_ButtonPressed>
	g_Timer0 = 0;
  d4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <g_Timer0+0x1>
  d8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <g_Timer0>
	g_LedState = 0;
  dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <g_LedState>
	
	gStateMachine = STATE_IDLE;
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
	
	setup();
  e6:	0e 94 01 02 	call	0x402	; 0x402 <setup>
		
    while(1)
    {
        switch (gStateMachine)
  ea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <gStateMachine>
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	91 05       	cpc	r25, r1
  f6:	e9 f1       	breq	.+122    	; 0x172 <main+0xaa>
  f8:	84 30       	cpi	r24, 0x04	; 4
  fa:	91 05       	cpc	r25, r1
  fc:	34 f4       	brge	.+12     	; 0x10a <main+0x42>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	91 05       	cpc	r25, r1
 102:	59 f0       	breq	.+22     	; 0x11a <main+0x52>
 104:	02 97       	sbiw	r24, 0x02	; 2
 106:	c1 f0       	breq	.+48     	; 0x138 <main+0x70>
			break;
			
			default:
			/*Should never enter this state*/
			/*Add fault handling*/
			break;			
 108:	a8 c0       	rjmp	.+336    	; 0x25a <main+0x192>
	
	setup();
		
    while(1)
    {
        switch (gStateMachine)
 10a:	84 30       	cpi	r24, 0x04	; 4
 10c:	91 05       	cpc	r25, r1
 10e:	09 f4       	brne	.+2      	; 0x112 <main+0x4a>
 110:	9f c0       	rjmp	.+318    	; 0x250 <main+0x188>
 112:	05 97       	sbiw	r24, 0x05	; 5
 114:	09 f4       	brne	.+2      	; 0x118 <main+0x50>
 116:	9e c0       	rjmp	.+316    	; 0x254 <main+0x18c>
			break;
			
			default:
			/*Should never enter this state*/
			/*Add fault handling*/
			break;			
 118:	a0 c0       	rjmp	.+320    	; 0x25a <main+0x192>
    while(1)
    {
        switch (gStateMachine)
		{
			case STATE_BOOT:
			ControlPowerLED(OFF);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 2c 02 	call	0x458	; 0x458 <ControlPowerLED>
			ControlMotorEnable(OFF);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ControlMotorEnable>
			ControlAmbientLED(OFF);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ControlAmbientLED>
			gStateMachine++;			
 12c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <gStateMachine>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
			
			break;
 136:	91 c0       	rjmp	.+290    	; 0x25a <main+0x192>
			motor disabled
			ambient light off
			power led breathing			
			*/
			
			if (g_ButtonPressed)
 138:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_ButtonPressed>
 13c:	88 23       	and	r24, r24
 13e:	09 f4       	brne	.+2      	; 0x142 <main+0x7a>
 140:	8b c0       	rjmp	.+278    	; 0x258 <main+0x190>
			{
				g_ButtonPressed = 0;
 142:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_ButtonPressed>
				ControlPowerLED(ON);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 2c 02 	call	0x458	; 0x458 <ControlPowerLED>
				ControlMotorEnable(ON);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ControlMotorEnable>
				g_MotorPulses = 0;
 152:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 156:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				g_MotorPosition = 1000;
 15a:	88 ee       	ldi	r24, 0xE8	; 232
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_MotorPosition+0x1>
 162:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_MotorPosition>
				gStateMachine++;
 166:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <gStateMachine>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
			}

			break;
 170:	73 c0       	rjmp	.+230    	; 0x258 <main+0x190>
			
			case STATE_ROTATE:
			PINC = (1<< MotorStep);	
 172:	86 e2       	ldi	r24, 0x26	; 38
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	28 e0       	ldi	r18, 0x08	; 8
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
				/*Increment motor pulses*/
				if (g_MotorPulses == g_MotorPosition)	//Change direction
 17c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 180:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 184:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_MotorPosition>
 188:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_MotorPosition+0x1>
 18c:	28 17       	cp	r18, r24
 18e:	39 07       	cpc	r19, r25
 190:	a9 f4       	brne	.+42     	; 0x1bc <main+0xf4>
				{
					ToggleMotorDirection();					
 192:	0e 94 2e 03 	call	0x65c	; 0x65c <ToggleMotorDirection>
					if (g_MotorPosition < 0)
 196:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_MotorPosition>
 19a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_MotorPosition+0x1>
 19e:	99 23       	and	r25, r25
 1a0:	3c f4       	brge	.+14     	; 0x1b0 <main+0xe8>
					{
						g_MotorPosition = 1000;
 1a2:	88 ee       	ldi	r24, 0xE8	; 232
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_MotorPosition+0x1>
 1aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_MotorPosition>
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <main+0xf4>
					}
					else
					{
						g_MotorPosition = -1000;
 1b0:	88 e1       	ldi	r24, 0x18	; 24
 1b2:	9c ef       	ldi	r25, 0xFC	; 252
 1b4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_MotorPosition+0x1>
 1b8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_MotorPosition>
					}
				}
				
				/*Check if value must be in or decremented*/
				if (g_MotorPulses > g_MotorPosition)
 1bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 1c4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_MotorPosition>
 1c8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_MotorPosition+0x1>
 1cc:	82 17       	cp	r24, r18
 1ce:	93 07       	cpc	r25, r19
 1d0:	54 f4       	brge	.+20     	; 0x1e6 <main+0x11e>
				{
					g_MotorPulses--;					
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <main+0x130>
				}
				else
				{
					g_MotorPulses++;					
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				}

				g_MotorPulseTimer++;
 1f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_MotorPulseTimer>
 1fc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_MotorPulseTimer+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <g_MotorPulseTimer+0x1>
 206:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_MotorPulseTimer>
				
				if (g_MotorTimer == 3)
 20a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_MotorTimer>
 20e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_MotorTimer+0x1>
				{
					//PINC = (1<< MotorStep);	
				}
				
				if (g_MotorTimer > 4)
 212:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_MotorTimer>
 216:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_MotorTimer+0x1>
 21a:	05 97       	sbiw	r24, 0x05	; 5
 21c:	20 f0       	brcs	.+8      	; 0x226 <main+0x15e>
				{
					//PINC = (1<< MotorStep);
					g_MotorTimer = 0;
 21e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <g_MotorTimer+0x1>
 222:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <g_MotorTimer>
				}
				
				if (g_ButtonPressed)
 226:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_ButtonPressed>
 22a:	88 23       	and	r24, r24
 22c:	59 f0       	breq	.+22     	; 0x244 <main+0x17c>
				{
					g_ButtonPressed = 0;
 22e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_ButtonPressed>
					ControlPowerLED(OFF);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 2c 02 	call	0x458	; 0x458 <ControlPowerLED>
					ControlMotorEnable(OFF);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ControlMotorEnable>
					gStateMachine = STATE_IDLE;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gStateMachine>
				}
				PINC = (1<< MotorStep);	
 244:	86 e2       	ldi	r24, 0x26	; 38
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	28 e0       	ldi	r18, 0x08	; 8
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
				
			break;
 24e:	05 c0       	rjmp	.+10     	; 0x25a <main+0x192>
			
			case STATE_DIMMING:
			
			break;
 250:	00 00       	nop
 252:	4b cf       	rjmp	.-362    	; 0xea <main+0x22>

			case STATE_SPEEDADJUST:
			
			break;
 254:	00 00       	nop
 256:	49 cf       	rjmp	.-366    	; 0xea <main+0x22>
				g_MotorPulses = 0;
				g_MotorPosition = 1000;
				gStateMachine++;
			}

			break;
 258:	00 00       	nop
			default:
			/*Should never enter this state*/
			/*Add fault handling*/
			break;			
		}
	}
 25a:	47 cf       	rjmp	.-370    	; 0xea <main+0x22>

Disassembly of section .text.InitTimer0:

000005bc <InitTimer0>:
#include <avr/interrupt.h>
#include "global.h"


void InitTimer0()
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
			TIMSK0	=	(1<<OCIE0A);							// Enable compare match A interrupt
			//sei();
		break;
		
		case 8000000:
			TCCR0A	=	(1<<WGM01);								// Configure timer in CTC mode
 5c4:	84 e4       	ldi	r24, 0x44	; 68
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	22 e0       	ldi	r18, 0x02	; 2
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
			TCCR0B  =	(1<<CS00) | (1<<CS01) | (0<<CS02);		// Set timer clock source to clock/8
 5ce:	85 e4       	ldi	r24, 0x45	; 69
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	23 e0       	ldi	r18, 0x03	; 3
 5d4:	fc 01       	movw	r30, r24
 5d6:	20 83       	st	Z, r18
			OCR0A	=	125;									// Compare register A to 125
 5d8:	87 e4       	ldi	r24, 0x47	; 71
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	2d e7       	ldi	r18, 0x7D	; 125
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
			TIMSK0	=	(1<<OCIE0A);							// Enable compare match A interrupt
 5e2:	8e e6       	ldi	r24, 0x6E	; 110
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	22 e0       	ldi	r18, 0x02	; 2
 5e8:	fc 01       	movw	r30, r24
 5ea:	20 83       	st	Z, r18
			//sei();
		break;
 5ec:	00 00       	nop
	}
}
 5ee:	00 00       	nop
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

Disassembly of section .text.InitTimer2:

0000039e <InitTimer2>:
	}

}

void InitTimer2() //Configuration as step driver for stepper motor
{	
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
	/*
	TCCR2A in CTC mode, toggle O2CA on compare match
	*/
	TCCR2A	=	(0<<COM2A1) | (1<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM20) | (1<<WGM21) | (0<<COM2B1);	
 3a6:	80 eb       	ldi	r24, 0xB0	; 176
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	22 e4       	ldi	r18, 0x42	; 66
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
	TCCR2B  =	(1<<CS20) | (0<<CS21) | (0<<CS22);		// Set timer clock source to clock/64 (8Mhz/64 = 125Khz)
 3b0:	81 eb       	ldi	r24, 0xB1	; 177
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
	OCR2A	=	125;	//1ms interrupt
 3ba:	83 eb       	ldi	r24, 0xB3	; 179
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	2d e7       	ldi	r18, 0x7D	; 125
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18
	OCR2B	=	0;		
 3c4:	84 eb       	ldi	r24, 0xB4	; 180
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	fc 01       	movw	r30, r24
 3ca:	10 82       	st	Z, r1
	TCNT2	=	0;		
 3cc:	82 eb       	ldi	r24, 0xB2	; 178
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	fc 01       	movw	r30, r24
 3d2:	10 82       	st	Z, r1
	DDRB	=	DDRB | (1<<MotorStep);						// Make sure PORTB.3 is set as output for the servo
 3d4:	84 e2       	ldi	r24, 0x24	; 36
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	24 e2       	ldi	r18, 0x24	; 36
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	20 81       	ld	r18, Z
 3e0:	28 60       	ori	r18, 0x08	; 8
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
	TIFR2	=	(1<<OCF2A);		//Clear interrupt flag
 3e6:	87 e3       	ldi	r24, 0x37	; 55
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	22 e0       	ldi	r18, 0x02	; 2
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
	TIMSK2	=	(1<<OCIE2A);	//Enable interrupt
 3f0:	80 e7       	ldi	r24, 0x70	; 112
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	22 e0       	ldi	r18, 0x02	; 2
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
}
 3fa:	00 00       	nop
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret
